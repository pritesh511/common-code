import React from "react";
import { jest } from "@jest/globals";
import { defineFeature, loadFeature } from "jest-cucumber";

import {
  render,
  cleanup,
  configure,
  RenderResult,
  fireEvent,
  within,
} from "@testing-library/react";
import "@testing-library/jest-dom";
import * as helpers from "framework/src/Helpers";
import * as utils from "framework/src/Utilities";

import InitializeMockResponses, {
  IRequest,
} from "../../../utilities/src/TestHelpers/InitializeMockResponses";

import getPageContainerMocks from "../../../utilities/src/TestHelpers/getPageContainerMocks";
import {
  customerResponseWithJeansCatalogue,
  orderResponseWithCartInstatus,
  orderResponseWithDiscountResponse,
  orderResponseWithPlacedInstatus,
  orderUpdateResponse,
  orderUpdateResponse1
} from "../../../../components/src/commonMockReponses";

import ShoppingCart from "../../src/ShoppingCart.web";
import {
  onChangeReactDatePicker,
  onGetSelectOptionsValues,
  onSearchAutoCompleteAndSelectValue,
  onSelectAutoCompleteDropdownValue,
  onSelectAutoCompleteWithSearch
} from "../../../utilities/src/TestHelpers/Helpers";
import { IMyUser } from "../../../navigationmenu/src/utils";
import { Message } from "../../../../framework/src/Message";
import {
  CustomEnums,
  getCustomEnumName,
} from "../../../../blocks/utilities/src/CustomBlockHelpers";
import { runEngine } from "../../../../framework/src/RunEngine";

const baseURL = require("../../../../framework/src/config").baseURL;

const headersWithContent = {
  token: "token",
  "Content-Type": "application/json",
};

const screenProps = {
  id: "PaymentModal",
  navigation: {
    navigate: jest.fn(),
    getParam: jest.fn().mockImplementation(() => ""),
  },
  currentUser: {
    attributes: {
      activated: true,
      country_code: "91",
      email: "a@g.com",
      first_name: "AyushiTest",
      permission_count: 22,
    },
  } as unknown as IMyUser,
  selectedMainTab: "",
};

configure({ testIdAttribute: "data-test-id" });

const feature = loadFeature(
  "./__tests__/features/ShoppingCartTest-scenario.web.feature"
);

const customerSearchResponse = {
  data: {
    id: "1356",
    type: "web_customer",
    attributes: {
      full_name: "Pritesh Makasana",
      activated: true,
      customer_preferences_attributes: null,
      cleaning_order: null,
      saved_notes: null,
    },
  },
};

function getMockFunction(request: IRequest) {
  const { url, headers } = request;
  const token = headers.token;

  switch (url) {
    case "/account_block/customers/auto_complete?full_phone_number=966560091202":
      return {
        customer: [],
        status: 200,
      };
  }
}

defineFeature(feature, (test) => {
  let spyFetch = jest.spyOn(window, "fetch");
  let screen: RenderResult;

  beforeAll(() => {
    InitializeMockResponses((request: IRequest) =>
      getPageContainerMocks(request, getMockFunction)
    );
  });

  beforeEach(() => {
    jest.resetModules();
    jest.doMock("react-native", () => ({ Platform: { OS: "web" } }));
    jest.spyOn(helpers, "getOS").mockImplementation(() => "web");

    jest.setTimeout(300000);
    window.localStorage.setItem("token", "token");
    jest.spyOn(utils, "getStorageData").mockImplementation((key, _) => {
      switch (key) {
        case "token":
          return Promise.resolve("token");
        default:
          return Promise.resolve();
      }
    });
    spyFetch = jest.spyOn(window, "fetch");
  });

  afterEach(() => {
    cleanup();
  });

  test("User navigates to ShoppingCart", ({ given, then }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    then("I can see the input", async () => {
      const search_customer_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(search_customer_input).toBeDefined();
    });
  });

  test("User should able to change country code", ({ given, when, then }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change country code input", async () => {
      const country_code_input = await screen.findByTestId(
        "field-country-code"
      );
      fireEvent.change(country_code_input, { target: { value: "+91" } });
      expect(country_code_input).toHaveValue("+91");
    });
    then("I can see the country code has been changed", async () => {
      const country_code_input = await screen.findByTestId(
        "field-country-code"
      );
      expect(country_code_input).toHaveValue("+91");
    });
  });

  test("User should able to search customer", ({ given, when, then }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change customer phone number", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "560091201" } });
    });
    then("I can see the customer name", async () => {
      const customer = await screen.findByText("Pritesh Makasana - 560091201");
      expect(customer).toBeDefined();
    });
    when("I select customer", async () => {
      const customer = await screen.findByText("Pritesh Makasana - 560091201");
      fireEvent.click(customer);
    });
    then("Value has been selected with customer", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toHaveValue("Pritesh Makasana - 560091201");
    });
    when("I passed empty value in mobile numbe", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toBeDefined();
      fireEvent.change(mobile_number_input, { target: { value: "" } });
    });
    then("I can see empty input value", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toHaveValue("");
    });
  });

  test("User should able not able to add customer with existing phone number", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change customer phone number", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "560091201" } });
    });
    then("I can see the customer name", async () => {
      const customer = await screen.findByText("Pritesh Makasana - 560091201");
      expect(customer).toBeDefined();
    });
    when("I select customer", async () => {
      const customer = await screen.findByText("Pritesh Makasana - 560091201");
      fireEvent.click(customer);
    });
    then("Value has been selected with customer", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toHaveValue("Pritesh Makasana - 560091201");
    });
    when("I click on add customer icon", async () => {
      const add_customer_btn = await screen.findByTestId("btn-add-customer");
      fireEvent.click(add_customer_btn);
    });
    then("I can see the error message", async () => {
      const error_msg = screen.findByText(
        "This phone number already belongs to a customer"
      );
      expect(error_msg).toBeDefined();
      await new Promise((r) => setTimeout(r, 3500));
    });
  });

  test("User should able not able to add customer with new phone number", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change customer phone number", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "560091202" } });
    });
    then("I can see the customer not found", async () => {
      const customer_not_found = await screen.findByText("No customers found");
      expect(customer_not_found).toBeDefined();
    });
    when("I click on add customer icon", async () => {
      const add_customer_btn = await screen.findByTestId("btn-add-customer");
      fireEvent.click(add_customer_btn);
    });
    then("I can see the add customer popver", async () => {
      const customer_popver = await screen.findByText("Create New Customer");
      expect(customer_popver).toBeDefined();

      const cancel_btn = await screen.findByTestId("cancelBtn");
      fireEvent.click(cancel_btn);
    });
    when("I am filling customer form and submit", async () => {
      const add_customer_btn = await screen.findByTestId("btn-add-customer");
      fireEvent.click(add_customer_btn);

      const name_field = await screen.findByPlaceholderText("Enter Name");
      fireEvent.change(name_field, { target: { value: "Pritesh Patel" } });

      await onSelectAutoCompleteWithSearch(screen, "genderDropdown", "male");

      // Search price list
      await onSearchAutoCompleteAndSelectValue(
        screen,
        "price_list",
        "Master Price List",
        "35"
      );

      await onChangeReactDatePicker(screen, "price_list_expiry_date");

      // I am select price list region
      await onSelectAutoCompleteDropdownValue(
        document,
        screen,
        "price_list_region_id",
        "Vadodara"
      );

      // I am select price list area
      await onSelectAutoCompleteDropdownValue(
        document,
        screen,
        "price_list_area_id",
        "area individual role"
      );

      // I am select price list store
      await onSelectAutoCompleteDropdownValue(
        document,
        screen,
        "price_list_store_id",
        "aichi store"
      );

      const submitBtn = await screen.findByTestId("submitBtn");
      fireEvent.click(submitBtn);
    });
    then("I can see customer created successfully", async () => {
      await new Promise((r) => setTimeout(r, 2000));
      const new_added_customer = await screen.findByText(
        "Pritesh Patel - 560091202"
      );
      expect(new_added_customer).toBeDefined();
    });
  });

  test.skip("User should able to view customer details", ({ given, when, then }) => {
    given("I am a User loading ShoppingCart", async () => {
      window.localStorage.setItem("store_id", "113");
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change customer phone number", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "560091201" } });
    });
    then("I can see the customer name", async () => {
      const customer = await screen.findByText("560091201 - Pritesh Makasana");
      expect(customer).toBeDefined();
    });
    when("I select customer", async () => {
      const customer = await screen.findByText("560091201 - Pritesh Makasana");
      fireEvent.click(customer);
    });
    then("Value has been selected with customer", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toHaveValue("560091201 - Pritesh Makasana");
    });
    when("I click on view customer icon", async () => {
      const view_button = await screen.findByTestId("btn-view-customer");
      fireEvent.click(view_button);
    });
    then("I can see the view customer popup with details", async () => {
      const view_customer_popup = await screen.findByRole("presentation");
      const view_customer_modal = await within(view_customer_popup).findByText(
        "Customer Information"
      );
      expect(view_customer_modal).toBeDefined();

      const cancel_btn = await screen.findByTestId("cancleBtn");
      fireEvent.click(cancel_btn);
    });
    then("I can see the customer details", async () => {
      const view_button = await screen.findByTestId("btn-view-customer");
      fireEvent.click(view_button);

      const view_customer_popup = await screen.findByRole("presentation");
      const email = await within(view_customer_popup).findByText(
        "pritesh@gmail.com"
      );
      expect(email).toBeDefined();
    });
    when("I click on edit button", async () => {
      const view_customer_popup = await screen.findByRole("presentation");
      const edit_button = await within(view_customer_popup).findByTestId(
        "editBtn"
      );
      fireEvent.click(edit_button);
    });
    then("I can navigate to edit customer", async () => {
      const edit_customer_popup = await screen.findByRole("presentation");
      const edit_customer = await within(edit_customer_popup).findByText(
        "Edit Customer"
      );
      expect(edit_customer).toBeDefined();
    });
  });

  test("User should able to select service from dropdown", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I select pickup service from dropdown", async () => {
      await onGetSelectOptionsValues(screen, "service-dropdown", "pick_up");
    });
    then("I can see the pickup date picker render", async () => {
      const pickup_datepicker = await screen.findByPlaceholderText(
        "Select Pick up Date"
      );
      expect(pickup_datepicker).toBeDefined();
    });
    when("I select delivery service from dropdown", async () => {
      await onGetSelectOptionsValues(screen, "service-dropdown", "delivery");
    });
    then("I can see the delivery date picker render", async () => {
      const delivery_datepicker = await screen.findByPlaceholderText(
        "Select Delivery Date"
      );
      expect(delivery_datepicker).toBeDefined();
    });
    when("I select pickup and delivery service from dropdown", async () => {
      await onGetSelectOptionsValues(
        screen,
        "service-dropdown",
        "pick_up_and_delivery"
      );
      let node = await screen.findByTestId("order-summary-total");
      fireEvent.click(node);
    });
    then("I can see the pickup and delivery date picker render", async () => {
      let node = await screen.findByPlaceholderText("Pick up date");
      expect(node).toBeDefined();
    });
  });

  test("User should able to add notes and save", ({ given, when, then }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I add notes and save", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);

      const note_text_area = await screen.findByPlaceholderText("Add Note");
      fireEvent.change(note_text_area, { target: { value: "New notes" } });

      let node = await screen.findByTestId("switch-test");
      let statusSwitch = node.querySelectorAll(
        "input[type='checkbox']"
      )[0] as HTMLInputElement;
      fireEvent.click(statusSwitch);
    });
    then("I can see the updated details", async () => {
      const note_text_area = await screen.findByPlaceholderText("Add Note");
      expect(note_text_area).toHaveValue("New notes");
    });
  });

  test("User should able to create new quick drop order", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change customer phone number", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "560091203" } });
    });
    then("I can see the customer name", async () => {
      const customer = await screen.findByText("Pritesh Patel - 560091203");
      expect(customer).toBeDefined();
    });
    when("I select customer", async () => {
      const customer = await screen.findByText("Pritesh Patel - 560091203");
      fireEvent.click(customer);
    });
    then("Value has been selected with customer", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toHaveValue("Pritesh Patel - 560091203");
    });
    when("I click on quickdrop plus button", async () => {
      const quick_plus_btn = await screen.findByTestId("quickDropPlusButton");
      fireEvent.click(quick_plus_btn);
    });
    then("New order will create", async () => {
      expect(spyFetch).toHaveBeenCalledWith(
        baseURL + "//bx_block_order_management/orders/new_order",
        {
          headers: headersWithContent,
          method: "POST",
          body: '{"data":{"customer_id":"1356","notes":"","store_management_id":66,"save_for_future":false,"is_quick_drop":true,"order_items_attributes":[{"quantity":1}]}}',
        }
      );
    });
  });

  test("User should able to update quick drop order", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change customer phone number", async () => {

      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "CUSTOMER_PHONE"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message)

      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "560091201" } });
    });
    then("I can see the customer name", async () => {
      const customer = await screen.findByText("Pritesh Makasana - 560091201");
      expect(customer).toBeDefined();
    });
    when("I select customer", async () => {
      const customer = await screen.findByText("Pritesh Makasana - 560091201");
      fireEvent.click(customer);
    });
    then("Value has been selected with customer", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toHaveValue("Pritesh Makasana - 560091201");
    });
    when("I click on quickdrop plus button", async () => {
      const quick_plus_btn = await screen.findByTestId("quickDropPlusButton");
      fireEvent.click(quick_plus_btn);
    });
    then("Qty will update", async () => {
      const quick_drop_count = await screen.findByTestId("quickDropInput");
      expect(quick_drop_count).toHaveValue("3");
    });
    when("I click on quickdrop minus button", async () => {
      const quick_minus_btn = await screen.findByTestId("quickDropMinusButton");
      fireEvent.click(quick_minus_btn);
    });
    then("Qty update API will called", async () => {
      expect(spyFetch).toHaveBeenCalledWith(
        baseURL + "//bx_block_order_management/orders/5983",
        {
          headers: headersWithContent,
          method: "PUT",
          body: '{"data":{"customer_id":"1356","notes":"","store_management_id":66,"save_for_future":false,"is_quick_drop":true,"order_items_attributes":[{"id":11159,"quantity":2,"_destroy":false}]}}',
        }
      );
    });
    when("I click on pay button", async () => {
      const pay_button = await screen.findByTestId("btnPay");
      fireEvent.click(pay_button);
    });
    then("Payment modal appear", async () => {
      const payment_model = await screen.findByTestId("paymentModal");
      expect(payment_model).toBeDefined();
    });
    when("I select payment method", async () => {
      const pay_later = await screen.findByText("Pay Later");
      fireEvent.click(pay_later);
    });
    then("Pay button appear", async () => {
      const pay_later_btn = await screen.findByTestId("btn-pay-later");
      expect(pay_later_btn).toBeDefined();
      fireEvent.click(pay_later_btn);
    });
  });

  test("User should see the order catalogue in cart", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("Order is update with cart catalogue", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });
    then("I can see the cart details", async () => {
      const product_name = await screen.findByText("Carpet sub 2");
      expect(product_name).toBeDefined();
    });
  });

  test("User should able to perform action in cart", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("Order is update with cart catalogue", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });
    then("I can see the cart details", async () => {
      const product_name = await screen.findByText("Carpet sub 2");
      expect(product_name).toBeDefined();
    });
    when("I perform cart action", async () => {
      const subtotal_collaps = await screen.findByTestId("order-summary-total");
      fireEvent.click(subtotal_collaps);

      const increase_qty_cart = await screen.findByTestId(
        "cart-catalogue-increase-930"
      );
      fireEvent.click(increase_qty_cart);

      const decrease_qty_cart = await screen.findByTestId(
        "cart-catalogue-decrease-930"
      );
      fireEvent.click(decrease_qty_cart);

      const delete_qty_cart = await screen.findByTestId(
        "cart-catalogue-delete-930"
      );
      fireEvent.click(delete_qty_cart);

      const clear_cart = await screen.findByTestId("clear-all-btn");
      fireEvent.click(clear_cart);
    });
    then("I can see the quantity", async () => {
      const catalogue_qty = await screen.findByTestId("catalogue-cart-qty-930");
      expect(catalogue_qty.innerHTML).toBe("1");
    });
  });

  test("User should able to pay the order with promocode", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change customer phone number", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "560091205" } });
    });
    then("I can see the customer name", async () => {
      const customer = await screen.findByText("Pritesh5 Patel - 560091205");
      expect(customer).toBeDefined();
    });
    when("I select customer", async () => {
      const customer = await screen.findByText("Pritesh5 Patel - 560091205");
      fireEvent.click(customer);
    });
    then("Value has been selected with customer", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toHaveValue("Pritesh5 Patel - 560091205");
    });
    when("I click on pay button", async () => {
      const btn_pay = await screen.findByTestId("btnPay");
      fireEvent.click(btn_pay);
    });
    then("I can see the payment modal", async () => {
      const payment_modal = await screen.findByText("Payment Method");
      expect(payment_modal).toBeDefined();
    });
    when("I select cash method and apply promocode", async () => {
      const btn_cash_method = await screen.findByTestId("payment-section-Cash");
      fireEvent.click(btn_cash_method);

      const apply_promocode_btn = await screen.findByTestId(
        "btn-promoCode-apply"
      );
      fireEvent.click(apply_promocode_btn);

      const promo_radio_btn = await screen.findByTestId("promo-item-radio");
      fireEvent.click(promo_radio_btn);

      const apply_promocode_btn2 = await screen.findByTestId(
        "btn-promoCode-apply2"
      );
      fireEvent.click(apply_promocode_btn2);
    });
    then("I can see the save money string", async () => {
      const save_money = await screen.findByText("Save SAR 50.0");
      expect(save_money).toBeDefined();
    });
    when("I click on pay button", async () => {
      localStorage.setItem("token", "token2");
      await new Promise((r) => setTimeout(r, 2000))
      const pay_cash_btn = await screen.findByTestId("btn-cash-payment");
      fireEvent.click(pay_cash_btn);
    });
    then("I can see the order summary", async () => {
      await new Promise((r) => setTimeout(r, 2000));
      const order_number = await screen.findByText("Order #OD00005742");
      expect(order_number).toBeDefined();

      const close_btn_summary = await screen.findByTestId(
        "btn-closeOrderSummary"
      );
      fireEvent.click(close_btn_summary);
    });
  });

  test("User should able to pay the order with promocode with new order", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("I change customer phone number", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "560091205" } });
    });
    then("I can see the customer name", async () => {
      const customer = await screen.findByText("Pritesh5 Patel - 560091205");
      expect(customer).toBeDefined();
    });
    when("I select customer", async () => {
      const customer = await screen.findByText("Pritesh5 Patel - 560091205");
      fireEvent.click(customer);
    });
    then("Value has been selected with customer", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      expect(mobile_number_input).toHaveValue("Pritesh5 Patel - 560091205");
    });
    when("I click on pay button", async () => {
      const btn_pay = await screen.findByTestId("btnPay");
      fireEvent.click(btn_pay);
    });
    then("I can see the payment modal", async () => {
      const payment_modal = await screen.findByText("Payment Method");
      expect(payment_modal).toBeDefined();
    });
    when("I select cash method and apply promocode", async () => {
      const btn_cash_method = await screen.findByTestId("payment-section-Cash");
      fireEvent.click(btn_cash_method);

      const apply_promocode_btn = await screen.findByTestId(
        "btn-promoCode-apply"
      );
      fireEvent.click(apply_promocode_btn);

      const promo_radio_btn = await screen.findByTestId("promo-item-radio");
      fireEvent.click(promo_radio_btn);

      const apply_promocode_btn2 = await screen.findByTestId(
        "btn-promoCode-apply2"
      );
      fireEvent.click(apply_promocode_btn2);
    });
    then("I can see the save money string", async () => {
      const save_money = await screen.findByText("Save SAR 50.0");
      expect(save_money).toBeDefined();
    });
    when("I click on pay button", async () => {
      localStorage.setItem("token", "token2");
      const pay_cash_btn = await screen.findByTestId("btn-cash-payment");
      fireEvent.click(pay_cash_btn);
    });
    then("I can see the order summary", async () => {
      await new Promise((r) => setTimeout(r, 2000));
      const order_number = await screen.findByText("Order #OD00005742");
      expect(order_number).toBeDefined();

      const printReceiptBtn = await screen.findByTestId("btn-printReceipt");
      fireEvent.click(printReceiptBtn);
      await new Promise((r) => setTimeout(r, 2000));

      const new_btn_summary = await screen.findByTestId("btn-newOrder");
      fireEvent.click(new_btn_summary);
    });
  });

  test("User should see the order catalogue in cart and then navigate to edit preferences", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("Order is update with cart catalogue", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });
    then("I can see the cart details", async () => {
      const product_name = await screen.findByText("Carpet sub 2");
      expect(product_name).toBeDefined();
    });
    when("I click on edit preference button from shopping cart", async () => {
      await new Promise((r) => setTimeout(r, 2000));
      const edit_preference_btn = await screen.findByTestId(
        "navigate-to-edit-btn"
      );
      fireEvent.click(edit_preference_btn);
    });
    then("Edit preference page will be display", async () => {
      const edit_preference_btn = await screen.findByTestId(
        "navigate-to-edit-btn"
      );
      expect(edit_preference_btn).toBeDefined();
    });
  });

  test("User should see the order catalogue in cart for prefrence customer", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      window.localStorage.setItem(
        "preferenceCustomer",
        JSON.stringify(preferenceCustomer)
      );
      screen = render(<ShoppingCart {...screenProps} />);
      await new Promise((r) => setTimeout(r, 2000));
    });
    when("Order is update with cart catalogue", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });
    then("I can see the cart details", async () => {
      const product_name = await screen.findByText("Carpet sub 2");
      expect(product_name).toBeDefined();
    });
  });

  test("User navigates to ShoppingCart for quickdrop edit order", ({ given,when, then }) => {
    given("I am a User loading ShoppingCart for quickdrop edit order", async () => {
      localStorage.setItem("token","token10")
      screen = render(<ShoppingCart {...screenEditProps} />);
    });
    when("I edit the order for quickdrop", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "EDIT_SELECT_CUSTOMER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });
    then("I can see the edited order", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "EDIT_SELECT_CUSTOMER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse1.data.attributes
      );
      runEngine.sendMessage(message.id, message);
      expect(message).toBeDefined();
    });

    when("I edit the set order for quickdrop", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse1.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });

    when("I click on pay button for quickdrop", async () => {
      const mobile_number_input = await screen.findByPlaceholderText(
        "Mobile Number"
      );
      fireEvent.change(mobile_number_input, { target: { value: "56009120" } });
      const btn_pay = await screen.findByTestId("btnPay");
      fireEvent.click(btn_pay);
    });
    then("I can see the payment modal for quickdrop", async () => {
      const payment_modal = await screen.findByText("Payment Method");
      expect(payment_modal).toBeDefined();
    });

    when("I click on pay button for quickdrop", async () => {
      await new Promise((r) => setTimeout(r, 2000))
      const pay_cash_btn = await screen.findByTestId("btn-cash-payment");
      fireEvent.click(pay_cash_btn);
    });
    then("I can see the order summary quickdrop", async () => {
      await new Promise((r) => setTimeout(r, 2000));

      const close_btn_summary = await screen.findByTestId(
        "btn-newOrder"
      );
      fireEvent.click(close_btn_summary);
    });
  });

  test("User navigates to ShoppingCart for placed edit order", ({ given,when, then }) => {
    given("I am a User loading ShoppingCart for placed edit order", async () => {
      localStorage.setItem("token","token11")
      screen = render(<ShoppingCart {...screenEditProps} />);
    });
    when("I edit the order for placed", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });
    then("I can see the edited placed order", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
      const btn_pay = await screen.findByTestId("btnPay");
      fireEvent.click(btn_pay);
      expect(message).toBeDefined();


      const pay_cash_btn = await screen.findByTestId("btn-cash-payment");
      fireEvent.click(pay_cash_btn);

      const close_btn_summary = await screen.findByTestId(
        "btn-closeOrderSummary"
      );
      fireEvent.click(close_btn_summary);
    });
  });

  test("User should able to add custom quantity", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("Order is update with cart catalogue", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });
    then("I can see the cart details", async () => {
      const product_name = await screen.findByText("Carpet sub 2");
      expect(product_name).toBeDefined();
    });
    when("I add custom qty", async () => {
      let node = await screen.findByTestId("qty-input-11275");
      fireEvent.change(node, { target: { value: "121" }});
    });
    then("I can see the quantity", async () => {
      let node = await screen.findByTestId("qty-input-11275");
      expect(node).toHaveValue("121");
    });
  });

  test("User should able to not able to add special character", ({
    given,
    when,
    then,
  }) => {
    given("I am a User loading ShoppingCart", async () => {
      screen = render(<ShoppingCart {...screenProps} />);
    });
    when("Order is update with cart catalogue", async () => {
      let message = new Message(
        getCustomEnumName(CustomEnums.CustomActionReducers)
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerAction),
        "SET_ORDER"
      );
      message.addData(
        getCustomEnumName(CustomEnums.CustomReducerPayload),
        orderUpdateResponse.data.attributes
      );
      runEngine.sendMessage(message.id, message);
    });
    then("I can see the cart details", async () => {
      const product_name = await screen.findByText("Carpet sub 2");
      expect(product_name).toBeDefined();
    });
    when("I add custom qty", async () => {
      let node = await screen.findByTestId("qty-input-11275");
      fireEvent.change(node, { target: { value: "-10" }});

      await new Promise((r) => setTimeout(r, 800));
    });
    then("I can see the error", async () => {
      let node = await screen.findByText("Please enter number only");
      expect(node).toBeDefined();
    });
  });
  
});
